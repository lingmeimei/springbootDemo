
#spring.profiles.active=dev
#springboot 针对mysql 多数据源连接方法:
spring.datasource.primary.jdbc-url=jdbc:mysql://localhost:3306/test1?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&useSSL=true
spring.datasource.primary.username=root
spring.datasource.primary.password=123456
spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver


spring.datasource.secondary.jdbc-url=jdbc:mysql://localhost:3306/test2?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&useSSL=true
spring.datasource.secondary.username=root
spring.datasource.secondary.password=123456
spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver

# 在上述多数据源连接信息配置好的情况下，
# jdbc 对多数据源的使用方法：
# 第一步：在相应的工程下或者是总工程下的 pom.xml 中引用 jdbc 的依赖
# 第二步：选择在与 SpringbootApplication的同级，创建一个新类，名为 DataSourceConfig
# 第三步：在需要用到 jdbcTemplate 的类中，添加如下引用,并且区分主从：
# @Autowired
# @Qualifier("primaryJdbcTemplate")
# protected JdbcTemplate primaryJdbcTemplate;

# @Autowired
# @Qualifier("secondaryJdbcTemplate")
# protected JdbcTemplate secondaryJdbcTemplate2;

# 第四步: 利用 相应的jdbcTemplate 执行sql,
# 注意：在 sql 语句所在的repositoryImpl类所实现的repository接口中需要继承Repository<实体类(Entity),Integer>

# springdataJpa 对多数据源的使用方法：
# 第一步：在相应的工程下或者是总工程下的 pom.xml 中引用 springdataJpa 的依赖
# 第二步：同上jdbc
# 第三步：新建一个对主数据源的JPA配置类PrimaryConfig类 和 次数据源的JPA配置类SecondaryConfig类
# (有几个数据源，就有几个配置)
# 第四步：在domain下的相应的主，次源的包下创建entity 和 repository
# 注意：如果在 JPA 的框架之中需要用到 jdbc , 则需要创建 repositoryImpl 去实现 repository ,
# 此时，repository 接口中不需要再有 @Query 注解以及 sql 语句了，
# 而 sql 语句写在了 repositoryImpl 中并利用 jdbc 执行。

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1ms
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=50
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=100000


